// Generated by Dagger (https://dagger.dev).
package com.example.examen1ev.ui.main;

import com.example.examen1ev.usescases.mensajes.InsertarMensaje;
import com.example.examen1ev.usescases.puntos.GetAllPuntos;
import com.example.examen1ev.usescases.puntos.GetOnePunto;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetAllPuntos> getAllProvider;

  private final Provider<InsertarMensaje> insertMensajeProvider;

  private final Provider<GetOnePunto> getOnePuntoProvider;

  public MainViewModel_Factory(Provider<GetAllPuntos> getAllProvider,
      Provider<InsertarMensaje> insertMensajeProvider, Provider<GetOnePunto> getOnePuntoProvider) {
    this.getAllProvider = getAllProvider;
    this.insertMensajeProvider = insertMensajeProvider;
    this.getOnePuntoProvider = getOnePuntoProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(getAllProvider.get(), insertMensajeProvider.get(), getOnePuntoProvider.get());
  }

  public static MainViewModel_Factory create(Provider<GetAllPuntos> getAllProvider,
      Provider<InsertarMensaje> insertMensajeProvider, Provider<GetOnePunto> getOnePuntoProvider) {
    return new MainViewModel_Factory(getAllProvider, insertMensajeProvider, getOnePuntoProvider);
  }

  public static MainViewModel newInstance(GetAllPuntos getAll, InsertarMensaje insertMensaje,
      GetOnePunto getOnePunto) {
    return new MainViewModel(getAll, insertMensaje, getOnePunto);
  }
}
